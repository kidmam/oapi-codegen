// This is an autogenerated file, any edits which you make here will be lost!
package parameters

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Type definition for component schema "ComplexObject"
type ComplexObject struct {
	Id     string `json:"Id"`
	Object Object `json:"Object"`
}

// Type definition for component schema "Object"
type Object struct {
	FirstName string `json:"firstName"`
	Role      string `json:"role"`
}

// Parameters object for GetQueryForm
type GetQueryFormParams struct {
	Ea *[]int32 `json:"ea,omitempty"`
	A  *[]int32 `json:"a,omitempty"`
	Eo *Object  `json:"eo,omitempty"`
	O  *Object  `json:"o,omitempty"`
}

type ServerInterface interface {
	//  (GET /contentObject/{param})
	GetContentObject(ctx echo.Context, param ComplexObject) error
	//  (GET /labelExplodeArray/{.param*})
	GetLabelExplodeArray(ctx echo.Context, param []int32) error
	//  (GET /labelExplodeObject/{.param*})
	GetLabelExplodeObject(ctx echo.Context, param Object) error
	//  (GET /labelNoExplodeArray/{.param})
	GetLabelNoExplodeArray(ctx echo.Context, param []int32) error
	//  (GET /labelNoExplodeObject/{.param})
	GetLabelNoExplodeObject(ctx echo.Context, param Object) error
	//  (GET /matrixExplodeArray/{.id*})
	GetMatrixExplodeArray(ctx echo.Context, id []int32) error
	//  (GET /matrixExplodeObject/{.id*})
	GetMatrixExplodeObject(ctx echo.Context, id Object) error
	//  (GET /matrixNoExplodeArray/{.id})
	GetMatrixNoExplodeArray(ctx echo.Context, id []int32) error
	//  (GET /matrixNoExplodeObject/{.id})
	GetMatrixNoExplodeObject(ctx echo.Context, id Object) error
	//  (GET /passThrough/{param})
	GetPassThrough(ctx echo.Context, param string) error
	//  (GET /queryForm)
	GetQueryForm(ctx echo.Context, params GetQueryFormParams) error
	//  (GET /simpleExplodeArray/{param*})
	GetSimpleExplodeArray(ctx echo.Context, param []int32) error
	//  (GET /simpleExplodeObject/{param*})
	GetSimpleExplodeObject(ctx echo.Context, param Object) error
	//  (GET /simpleNoExplodeArray/{param})
	GetSimpleNoExplodeArray(ctx echo.Context, param []int32) error
	//  (GET /simpleNoExplodeObject/{param})
	GetSimpleNoExplodeObject(ctx echo.Context, param Object) error
	//  (GET /simplePrimitive/{param})
	GetSimplePrimitive(ctx echo.Context, param int32) error
}

type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Wrapper for GetContentObject
func (w *ServerInterfaceWrapper) GetContentObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param ComplexObject

	err = json.Unmarshal([]byte(ctx.Param("param")), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'param' as JSON")
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContentObject(ctx, Param)
	return err
}

// Wrapper for GetLabelExplodeArray
func (w *ServerInterfaceWrapper) GetLabelExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param []int32

	err = runtime.BindStyledParameter("label", true, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelExplodeArray(ctx, Param)
	return err
}

// Wrapper for GetLabelExplodeObject
func (w *ServerInterfaceWrapper) GetLabelExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param Object

	err = runtime.BindStyledParameter("label", true, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelExplodeObject(ctx, Param)
	return err
}

// Wrapper for GetLabelNoExplodeArray
func (w *ServerInterfaceWrapper) GetLabelNoExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param []int32

	err = runtime.BindStyledParameter("label", false, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelNoExplodeArray(ctx, Param)
	return err
}

// Wrapper for GetLabelNoExplodeObject
func (w *ServerInterfaceWrapper) GetLabelNoExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param Object

	err = runtime.BindStyledParameter("label", false, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelNoExplodeObject(ctx, Param)
	return err
}

// Wrapper for GetMatrixExplodeArray
func (w *ServerInterfaceWrapper) GetMatrixExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var Id []int32

	err = runtime.BindStyledParameter("matrix", true, "id", ctx.Param("id"), &Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixExplodeArray(ctx, Id)
	return err
}

// Wrapper for GetMatrixExplodeObject
func (w *ServerInterfaceWrapper) GetMatrixExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var Id Object

	err = runtime.BindStyledParameter("matrix", true, "id", ctx.Param("id"), &Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixExplodeObject(ctx, Id)
	return err
}

// Wrapper for GetMatrixNoExplodeArray
func (w *ServerInterfaceWrapper) GetMatrixNoExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var Id []int32

	err = runtime.BindStyledParameter("matrix", false, "id", ctx.Param("id"), &Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixNoExplodeArray(ctx, Id)
	return err
}

// Wrapper for GetMatrixNoExplodeObject
func (w *ServerInterfaceWrapper) GetMatrixNoExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var Id Object

	err = runtime.BindStyledParameter("matrix", false, "id", ctx.Param("id"), &Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixNoExplodeObject(ctx, Id)
	return err
}

// Wrapper for GetPassThrough
func (w *ServerInterfaceWrapper) GetPassThrough(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param string

	Param = ctx.Param("param")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPassThrough(ctx, Param)
	return err
}

// Wrapper for GetQueryForm
func (w *ServerInterfaceWrapper) GetQueryForm(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params GetQueryFormParams
	// ------------- Optional query parameter "ea" -------------
	var Ea []int32
	if paramValue := ctx.QueryParam("ea"); paramValue != "" {

		err = runtime.BindStyledParameter("form", true, "ea", paramValue, &Ea)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ea: %s", err))
		}
		params.Ea = &Ea
	}

	// ------------- Optional query parameter "a" -------------
	var A []int32
	if paramValue := ctx.QueryParam("a"); paramValue != "" {

		err = runtime.BindStyledParameter("form", false, "a", paramValue, &A)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter a: %s", err))
		}
		params.A = &A
	}

	// ------------- Optional query parameter "eo" -------------
	var Eo Object
	if paramValue := ctx.QueryParam("eo"); paramValue != "" {

		err = runtime.BindStyledParameter("form", true, "eo", paramValue, &Eo)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eo: %s", err))
		}
		params.Eo = &Eo
	}

	// ------------- Optional query parameter "o" -------------
	var O Object
	if paramValue := ctx.QueryParam("o"); paramValue != "" {

		err = runtime.BindStyledParameter("form", true, "o", paramValue, &O)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
		}
		params.O = &O
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetQueryForm(ctx, params)
	return err
}

// Wrapper for GetSimpleExplodeArray
func (w *ServerInterfaceWrapper) GetSimpleExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param []int32

	err = runtime.BindStyledParameter("simple", true, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleExplodeArray(ctx, Param)
	return err
}

// Wrapper for GetSimpleExplodeObject
func (w *ServerInterfaceWrapper) GetSimpleExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param Object

	err = runtime.BindStyledParameter("simple", true, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleExplodeObject(ctx, Param)
	return err
}

// Wrapper for GetSimpleNoExplodeArray
func (w *ServerInterfaceWrapper) GetSimpleNoExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param []int32

	err = runtime.BindStyledParameter("simple", false, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleNoExplodeArray(ctx, Param)
	return err
}

// Wrapper for GetSimpleNoExplodeObject
func (w *ServerInterfaceWrapper) GetSimpleNoExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param Object

	err = runtime.BindStyledParameter("simple", false, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleNoExplodeObject(ctx, Param)
	return err
}

// Wrapper for GetSimplePrimitive
func (w *ServerInterfaceWrapper) GetSimplePrimitive(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var Param int32

	err = runtime.BindStyledParameter("simple", false, "param", ctx.Param("param"), &Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimplePrimitive(ctx, Param)
	return err
}

func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}
	router.GET("/contentObject/:param", wrapper.GetContentObject)
	router.GET("/labelExplodeArray/:param", wrapper.GetLabelExplodeArray)
	router.GET("/labelExplodeObject/:param", wrapper.GetLabelExplodeObject)
	router.GET("/labelNoExplodeArray/:param", wrapper.GetLabelNoExplodeArray)
	router.GET("/labelNoExplodeObject/:param", wrapper.GetLabelNoExplodeObject)
	router.GET("/matrixExplodeArray/:id", wrapper.GetMatrixExplodeArray)
	router.GET("/matrixExplodeObject/:id", wrapper.GetMatrixExplodeObject)
	router.GET("/matrixNoExplodeArray/:id", wrapper.GetMatrixNoExplodeArray)
	router.GET("/matrixNoExplodeObject/:id", wrapper.GetMatrixNoExplodeObject)
	router.GET("/passThrough/:param", wrapper.GetPassThrough)
	router.GET("/queryForm", wrapper.GetQueryForm)
	router.GET("/simpleExplodeArray/:param", wrapper.GetSimpleExplodeArray)
	router.GET("/simpleExplodeObject/:param", wrapper.GetSimpleExplodeObject)
	router.GET("/simpleNoExplodeArray/:param", wrapper.GetSimpleNoExplodeArray)
	router.GET("/simpleNoExplodeObject/:param", wrapper.GetSimpleNoExplodeObject)
	router.GET("/simplePrimitive/:param", wrapper.GetSimplePrimitive)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9yYy2+jPhDH/5Vofr/TCkHa3rhV1a5UafvYTW9VDi5MEleA3bGpEkX87ysb8uBRAm3K",
	"pntLjOf14euBYQ2BiKVIMNEK/DUQKikShfbPhMcywt/FklkJRKIx0eanxqX2ZMR4Yv6pYIExs+srieCD",
	"0sSTOWRZ5kCIKiAuNRcJ+HA5UtbvaBNrJJ6eMdBgtuZ+bPQrYXYt7/KL/hokCYmkeZ7cddgQzYHd9v8J",
	"Z+DDf96uQq9w793tIhK+pJwwBP9xY+wY59OSs3LsGSelb1mMjSmQiJouVGLZXc6eq6llxZOZMMYRD7CA",
	"nthAcHP9YLxrro17eEClRxOkVyRw4BVJ5XjP3LE7NhuFxIRJDj5cuGP3DByQTC9s/l5xH/P6vLVkxOLM",
	"XJmjLdcUy8z9MpTN4tW+gXVFLEaNpMB/LOmCSRnxwBp7z0pU1NF2U8o3vKABvk0bnA0GGxn2WWpKMZs6",
	"Ze2ej8dvxdvu8yoCz2xML2JPGH1fykiEeEnEVt7atVG/tSL6WTWrY8L8ap5yj+qcPYJcY6z25MUTjXMk",
	"K418hdng5jDplZWKLQiOhMgBlcYxoxX4SRpFNWIbTfVF9pa0jsGsSysYGtetaJLYYVxluxZeMxapf05k",
	"2+rLMuuB7aDOPsLtxIQWM018WdEZD9sP5U3N6D2HkofHFlhezGC4tgLrxev9XewAsH7KGopVrYnxsAOr",
	"I7Swryuvegfrx+wD/euLSUwypR4WJNL5ossr6v1ue+sLao/B5a+8fr6kSKsfguK2Yn9tN9VKLU9bhSzC",
	"ESvOWlMnsiF3NSIrFVgI6kOna2ZSzZxqdrWk9sVbyWqwpLbIxOaobVZaoYn2/LqNo9VcGlJoQXSMFI6o",
	"5HzOLz8hOkwFk5rZyUxSeUWf2fRKzErzeQ9opzNLDQWs+iJy+HExabA7nWlqcG7dPwVNmgxPYp4aCto9",
	"8Zhr/ordcW1N6qDeBcY8upjOtXRxDk6DtD6Hiu3syn52zNNPKQIfFlpL3/OKb44alXZDRBkz6TIO2TT7",
	"EwAA///+NTEmaRYAAA==",
}

// Returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

